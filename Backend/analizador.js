/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[5,30,46,47,48,49,50,97,98,107],$Va=[1,24],$Vb=[30,45,64,72],$Vc=[2,42],$Vd=[1,29],$Ve=[1,30],$Vf=[1,35],$Vg=[1,33],$Vh=[1,34],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[1,41],$Vn=[1,42],$Vo=[5,23,27,30,43,44,45,46,47,48,49,50,52,58,59,60,61,62,71,77,78,79,82,86,88,90,92,93,95,97,98,107],$Vp=[1,74],$Vq=[1,70],$Vr=[1,72],$Vs=[1,71],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[9,45,51,52,53,54,55,56,63,64,65,66,67,68,69,70],$VI=[2,60],$VJ=[1,93],$VK=[45,77],$VL=[1,128],$VM=[9,45,69,70],$VN=[5,23,27,30,43,46,47,48,49,50,77,79,82,86,88,90,92,93,95,97,98,107],$VO=[1,173],$VP=[1,177],$VQ=[1,184],$VR=[1,188],$VS=[1,185],$VT=[1,182],$VU=[1,180],$VV=[1,181],$VW=[1,186],$VX=[1,187],$VY=[9,45,51,52,63,64,65,66,67,68,69,70],$VZ=[9,45,51,52,53,54,56,63,64,65,66,67,68,69,70],$V_=[9,45,63,64,65,66,67,68,69,70],$V$=[23,27,30,43,46,47,48,49,50,77,79,82,86,92,93,95,98],$V01=[23,27,30,43,46,47,48,49,50,77,79,82,86,88,90,92,93,95,98],$V11=[1,268],$V21=[1,269],$V31=[1,294],$V41=[1,295],$V51=[1,304];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"INICIALIZACION":8,"ptcoma":9,"METODOS":10,"FUNCIONES":11,"PRINT":12,"EXEC":13,"OPCIONESMETODS":14,"CUERPOMETODO":15,"SWITCHS":16,"WHILES":17,"IFS":18,"DECLAVECT":19,"MODDIFIC":20,"DECLALIST":21,"ADDLIST":22,"break":23,"FORS":24,"DOWHILE":25,"RETURN":26,"continue":27,"CALLS":28,"TIPO":29,"identificador":30,"igual":31,"EXP":32,"CASTEO":33,"ACCESS":34,"TOLOWEER":35,"TOUPPER":36,"LENGTH":37,"TRUNCATE":38,"ROUND":39,"TYPEOF":40,"TOSTRING":41,"TOCHARARRAY":42,"return":43,"parA":44,"parC":45,"char":46,"boolean":47,"double":48,"int":49,"string":50,"mas":51,"menos":52,"div":53,"multi":54,"exponente":55,"modulo":56,"LLAMADAS":57,"cadena":58,"caracter":59,"numeros":60,"true":61,"false":62,"menor":63,"mayor":64,"menorigual":65,"mayorigual":66,"diferencia":67,"igualigual":68,"or":69,"and":70,"not":71,"corA":72,"corC":73,"new":74,"llaveA":75,"EXPRESIONES":76,"llaveC":77,"coma":78,"list":79,"punto":80,"add":81,"if":82,"CONTINAUCIONIF":83,"ELSEIF":84,"ELSES":85,"switch":86,"CUERPOSWITCH":87,"case":88,"dospts":89,"default":90,"else":91,"while":92,"for":93,"INCRE":94,"do":95,"LOGICO":96,"void":97,"print":98,"tolower":99,"toupper":100,"length":101,"truncate":102,"round":103,"typeof":104,"tostring":105,"tochararray":106,"exec":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"ptcoma",23:"break",27:"continue",30:"identificador",31:"igual",43:"return",44:"parA",45:"parC",46:"char",47:"boolean",48:"double",49:"int",50:"string",51:"mas",52:"menos",53:"div",54:"multi",55:"exponente",56:"modulo",58:"cadena",59:"caracter",60:"numeros",61:"true",62:"false",63:"menor",64:"mayor",65:"menorigual",66:"mayorigual",67:"diferencia",68:"igualigual",69:"or",70:"and",71:"not",72:"corA",73:"corC",74:"new",75:"llaveA",77:"llaveC",78:"coma",79:"list",80:"punto",81:"add",82:"if",86:"switch",88:"case",89:"dospts",90:"default",91:"else",92:"while",93:"for",95:"do",97:"void",98:"print",99:"tolower",100:"toupper",101:"length",102:"truncate",103:"round",104:"typeof",105:"tostring",106:"tochararray",107:"exec"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,3],[6,1],[6,1],[6,1],[6,1],[6,1],[14,2],[14,1],[15,1],[15,1],[15,1],[15,1],[15,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[7,3],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,2],[26,3],[26,2],[8,4],[33,4],[29,1],[29,1],[29,1],[29,1],[29,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[19,10],[19,8],[76,3],[76,3],[76,3],[76,3],[76,3],[76,1],[76,1],[76,1],[76,1],[76,1],[34,4],[34,6],[20,7],[20,9],[21,12],[22,7],[18,8],[18,7],[83,2],[83,1],[16,7],[87,5],[87,4],[87,3],[84,8],[85,4],[17,7],[24,11],[24,10],[24,11],[25,9],[94,2],[94,2],[96,1],[96,1],[96,1],[11,8],[11,7],[10,8],[10,7],[57,4],[57,3],[28,2],[12,5],[12,4],[35,4],[36,4],[37,4],[38,4],[39,4],[40,4],[41,4],[42,4],[13,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 11:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 12:
this.$=[$$[$0]];
break;
case 4: case 6: case 7: case 8: case 9: case 10: case 13: case 14: case 15: case 16: case 18: case 19: case 20: case 21: case 22: case 24: case 25: case 26: case 27: case 28: case 29:
this.$=$$[$0]
break;
case 5: case 17:
this.$=$$[$0-2]
break;
case 23:
this.$=$$[$0-1]
break;
case 30:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1],null, $$[$0-2],this._$.first_line,this._$.first_column+1);
break;
case 31:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3],$$[$0-1], $$[$0-4],this._$.first_line,this._$.first_column+1);
break;
case 45:
this.$=INSTRUCCION.nuevaAsignacion($$[$0-3],$$[$0-1],this._$.first_line,this._$.first_column+1 )
break;
case 47:
this.$ = TIPO_DATO.CHAR
break;
case 48:
this.$= TIPO_DATO.BOOLEAN
break;
case 49:
this.$ =TIPO_DATO.DOUBLE
break;
case 50:
this.$ = TIPO_DATO.INT
break;
case 51:
this.$ = TIPO_DATO.STRING
break;
case 52:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1)
break;
case 53:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1)
break;
case 54: case 120:
this.$ = $$[$0-1]
break;
case 55:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1)
break;
case 56:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1)
break;
case 57:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1)
break;
case 58:
this.$ = INSTRUCCION.nuevaOperacionBinaria(1, $$[$0], TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1)
break;
case 59:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1)
break;
case 60:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1)
break;
case 62:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.STRING, this._$.first_line,this._$.first_column+1)
break;
case 63:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CHAR, this._$.first_line,this._$.first_column+1)
break;
case 64:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.INT, this._$.first_line,this._$.first_column+1)
break;
case 65:
this.$ = INSTRUCCION.nuevoValor(($$[$0]), TIPO_VALOR.BOOLEAN, this._$.first_line,this._$.first_column+1)
break;
case 66:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BOOLEAN, this._$.first_line,this._$.first_column+1)
break;
case 67:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1)
break;
case 68:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1)
break;
case 69:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1)
break;
case 70:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1)
break;
case 71:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1)
break;
case 72:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1)
break;
case 74:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1)
break;
case 75:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1)
break;
case 95:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 104:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 108:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6],this._$.first_line, this._$.first_column+1)
break;
case 116:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1] , this._$.first_line, this._$.first_column+1 )
break;
case 117:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1] , this._$.first_line, this._$.first_column+1 )
break;
case 118:
this.$= INSTRUCCION.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1)
break;
case 119:
this.$= INSTRUCCION.nuevaLlamada($$[$0-2], null, this._$.first_line, this._$.first_column+1)
break;
case 121:
this.$ = new INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line, this._$.first_column+1)
break;
case 122:
this.$ = new INSTRUCCION.nuevoPrint( INSTRUCCION.nuevoValor("", TIPO_VALOR.STRING, this._$.first_line,this._$.first_column+1) , this._$.first_line, this._$.first_column+1)
break;
case 131:
this.$ = INSTRUCCION.nuevoExec($$[$0-3],null, this._$.first_line, this._$.first_column+1)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,29:10,30:$V0,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,97:$V6,98:$V7,107:$V8},{1:[3]},{5:[1,20],6:21,7:4,8:5,10:6,11:7,12:8,13:9,29:10,30:$V0,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,97:$V6,98:$V7,107:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,7],{9:[1,22]}),o($V9,[2,6]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),{30:[1,23]},{31:$Va},{30:[1,25]},{44:[1,26]},{30:[1,27]},o($Vb,[2,47]),o($Vb,[2,48]),o($Vb,[2,49]),o($Vb,[2,50]),o($Vb,[2,51]),{1:[2,1]},o($V9,[2,2]),{6:28,7:4,8:5,10:6,11:7,12:8,13:9,29:10,30:$V0,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,97:$V6,98:$V7,107:$V8},o($V9,$Vc,{9:$Vd,31:$Ve,44:[1,31]}),{30:$Vf,32:32,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{44:[1,43]},{30:$Vf,32:44,44:$Vg,45:[1,45],52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{44:[1,46]},o($V9,[2,5]),o($Vo,[2,30]),{30:[1,59],32:47,33:48,34:49,35:50,36:51,37:52,38:53,39:54,40:55,41:56,42:57,44:[1,58],52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn,99:[1,60],100:[1,61],101:[1,62],102:[1,63],103:[1,64],104:[1,65],105:[1,66],106:[1,67]},{7:73,29:75,30:$Vp,45:[1,69],46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,58:$Vq,59:$Vr,60:$Vs,76:68},{9:[1,76],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{30:$Vf,32:91,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:92,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},o($VH,$VI,{44:$VJ}),o($VH,[2,61]),o($VH,[2,62]),o($VH,[2,63]),o($VH,[2,64]),o($VH,[2,65]),o($VH,[2,66]),{30:$Vf,32:94,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{7:73,29:75,30:$Vp,45:[1,96],46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,58:$Vq,59:$Vr,60:$Vs,76:95},{45:[1,97],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{9:[1,98]},{45:[1,99]},{9:[1,100],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{9:[1,101]},{9:[1,102]},{9:[1,103]},{9:[1,104]},{9:[1,105]},{9:[1,106]},{9:[1,107]},{9:[1,108]},{9:[1,109]},{9:[1,110]},{29:111,30:$Vf,32:91,44:$Vg,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},o([9,51,52,53,54,55,56,63,64,65,66,67,68,69,70],$VI,{44:$VJ,72:[1,112]}),{44:[1,113]},{44:[1,114]},{44:[1,115]},{44:[1,116]},{44:[1,117]},{44:[1,118]},{44:[1,119]},{44:[1,120]},{45:[1,121]},{75:[1,122]},o($VK,[2,86],{78:[1,123]}),o($VK,[2,87],{78:[1,124]}),o($VK,[2,85],{78:[1,125]}),o($VK,[2,83],{78:[1,126]}),o($VK,[2,84],{78:[1,127]}),{30:$VL},o([5,9,23,27,30,43,44,45,46,47,48,49,50,52,58,59,60,61,62,71,77,79,82,86,88,90,92,93,95,97,98,107],[2,45]),{30:$Vf,32:129,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:130,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:131,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:132,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:133,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:134,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:135,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:136,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:137,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:138,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:139,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:140,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:141,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:142,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{45:[1,143],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},o($VH,[2,58]),{7:73,29:75,30:$Vp,45:[1,145],46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,58:$Vq,59:$Vr,60:$Vs,76:144},o($VM,[2,75],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE}),{45:[1,146]},{75:[1,147]},{9:[1,148]},o($VN,[2,122]),{9:[1,149]},o($Vo,[2,31]),o($Vo,[2,32]),o($Vo,[2,33]),o($Vo,[2,34]),o($Vo,[2,35]),o($Vo,[2,36]),o($Vo,[2,37]),o($Vo,[2,38]),o($Vo,[2,39]),o($Vo,[2,40]),o($Vo,[2,41]),{45:[1,150]},{60:[1,151],72:[1,152]},{30:$Vf,32:153,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:154,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:155,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:156,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:157,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:158,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:159,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:160,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{75:[1,161]},{7:167,8:168,12:179,14:162,15:163,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{7:73,29:75,30:$Vp,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,58:$Vq,59:$Vr,60:$Vs,76:190},{7:73,29:75,30:$Vp,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,58:$Vq,59:$Vr,60:$Vs,76:191},{7:73,29:75,30:$Vp,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,58:$Vq,59:$Vr,60:$Vs,76:192},{7:73,29:75,30:$Vp,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,58:$Vq,59:$Vr,60:$Vs,76:193},{7:73,29:75,30:$Vp,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,58:$Vq,59:$Vr,60:$Vs,76:194},o([23,27,30,43,44,45,46,47,48,49,50,52,58,59,60,61,62,71,77,78,79,82,86,88,90,92,93,95,98],$Vc,{9:$Vd,31:$Ve}),o($VY,[2,52],{53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o($VY,[2,53],{53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o($VZ,[2,55],{55:$Vx}),o($VZ,[2,56],{55:$Vx}),o($VH,[2,57]),o($VZ,[2,59],{55:$Vx}),o($V_,[2,67],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o($V_,[2,68],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o($V_,[2,69],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o($V_,[2,70],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o($V_,[2,71],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o($V_,[2,72],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy}),o([9,45,69],[2,73],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,70:$VG}),o($VM,[2,74],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE}),o($VH,[2,54]),{45:[1,195]},o($VH,[2,119]),{75:[1,196]},{7:167,8:168,12:179,14:197,15:163,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},o($VN,[2,121]),o($V9,[2,131]),{30:$Vf,32:198,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{73:[1,199]},{60:[1,200]},{45:[1,201],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{45:[1,202],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{45:[1,203],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{45:[1,204],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{45:[1,205],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{45:[1,206],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{45:[1,207],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{45:[1,208],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{7:167,8:168,12:179,14:209,15:163,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{7:167,8:168,12:179,15:211,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,77:[1,210],79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},o($V$,[2,12]),o($V01,[2,13]),o($V01,[2,14]),o($V01,[2,15]),o($V01,[2,16]),o($V01,[2,18],{9:[1,212]}),o($V01,[2,19]),o($V01,[2,20]),o($V01,[2,21]),o($V01,[2,22]),{9:[1,213]},o($V01,[2,24]),o($V01,[2,25]),o($V01,[2,26]),o($V01,[2,27]),o($V01,[2,28]),o($V01,[2,29]),{44:[1,214]},{44:[1,215]},{44:[1,216]},{30:$VL,72:[1,217]},{31:$Va,44:$VJ,72:[1,218],80:[1,219]},{63:[1,220]},{44:[1,221]},{75:[1,222]},{9:[1,224],30:$Vf,32:223,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{9:[1,225]},o($VK,[2,78]),o($VK,[2,79]),o($VK,[2,80]),o($VK,[2,81]),o($VK,[2,82]),o($VH,[2,118]),{7:167,8:168,12:179,14:226,15:163,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{7:167,8:168,12:179,15:211,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,77:[1,227],79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{9:[2,46],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{9:[2,88]},{73:[1,228]},{9:[2,123]},{9:[2,124]},{9:[2,125]},{9:[2,126]},{9:[2,127]},{9:[2,128]},{9:[2,129]},{9:[2,130]},{7:167,8:168,12:179,15:211,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,77:[1,229],79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},o($V9,[2,115]),o($V$,[2,11]),{7:167,8:168,12:179,15:230,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},o($V01,[2,23]),{30:$Vf,32:231,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:232,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:233,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{73:[1,234]},{60:[1,235],72:[1,236]},{81:[1,237]},{29:238,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5},{7:239,8:240,29:75,30:$V0,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5},{7:167,8:168,12:179,14:241,15:163,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{9:[1,242],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},o($V01,[2,44]),o($V01,[2,120]),{7:167,8:168,12:179,15:211,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,77:[1,243],79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},o($V9,[2,117]),{73:[1,244]},o($V9,[2,114]),o($V01,[2,17]),{45:[1,245],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{45:[1,246],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{45:[1,247],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{30:[1,248]},{73:[1,249]},{60:[1,250]},{44:[1,251]},{64:[1,252]},{30:$Vf,32:253,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:$Vf,32:254,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{7:167,8:168,12:179,15:211,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,77:[1,255],79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},o($V01,[2,43]),o($V9,[2,116]),{9:[2,89]},{75:[1,256]},{75:[1,257]},{75:[1,258]},{31:[1,259]},{31:[1,260]},{73:[1,261]},{30:$Vf,32:262,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{30:[1,263]},{9:[1,264],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{9:[1,265],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{92:[1,266]},{87:267,88:$V11,90:$V21},{7:167,8:168,12:179,14:270,15:163,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{7:167,8:168,12:179,14:271,15:163,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{74:[1,272],75:[1,273]},{30:$Vf,32:274,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{73:[1,275]},{45:[1,276],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{31:[1,277]},{30:[1,278]},{8:279,30:[1,280]},{44:[1,281]},{77:[1,282]},{60:[1,283]},{89:[1,284]},{7:167,8:168,12:179,15:211,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,77:[1,285],79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{7:167,8:168,12:179,15:211,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,77:[1,286],79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{29:287,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5},{7:73,29:75,30:$Vp,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,58:$Vq,59:$Vr,60:$Vs,76:288},{9:[1,289],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{31:[1,290]},{9:[1,291]},{74:[1,292]},{51:$V31,52:$V41,94:293},{45:[1,296]},{31:$Va,51:$V31,52:$V41,94:297},{30:$Vf,32:298,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},o($V01,[2,98]),{89:[1,299]},{7:167,8:168,12:179,15:300,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},o($V01,[2,104]),o($V01,[2,95],{83:301,84:302,85:303,91:$V51}),{72:[1,305]},{77:[1,306]},o($V01,[2,90]),{30:$Vf,32:307,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},o($V01,[2,93]),{79:[1,308]},{45:[1,309]},{51:[1,310]},{52:[1,311]},{75:[1,312]},{45:[1,313]},{45:[1,314],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{7:167,8:168,12:179,15:315,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{77:[2,101]},o($V01,[2,94]),{83:316,84:302,85:303,91:$V51},o($V01,[2,97]),{75:[1,318],82:[1,317]},{60:[1,319]},o($V01,[2,77]),{9:[1,320],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},{63:[1,321]},{75:[1,322]},{45:[2,109]},{45:[2,110]},{7:167,8:168,12:179,15:323,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{75:[1,324]},{9:[1,325]},{77:[2,100],87:326,88:$V11,90:$V21},o($V01,[2,96]),{44:[1,327]},{7:167,8:168,12:179,15:328,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{73:[1,329]},o($V01,[2,91]),{29:330,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5},{7:167,8:168,12:179,15:331,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{77:[1,332]},{7:167,8:168,12:179,15:333,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},o($V01,[2,108]),{77:[2,99]},{30:$Vf,32:334,44:$Vg,52:$Vh,57:36,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm,71:$Vn},{77:[1,335]},o($V01,[2,76]),{64:[1,336]},{77:[1,337]},o($V01,[2,106]),{77:[1,338]},{45:[1,339],51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG},o($V01,[2,103]),{9:[1,340]},o($V01,[2,105]),o($V01,[2,107]),{75:[1,341]},o($V01,[2,92]),{7:167,8:168,12:179,15:342,16:164,17:165,18:166,19:169,20:170,21:171,22:172,23:$VO,24:174,25:175,26:176,27:$VP,28:178,29:183,30:$VQ,43:$VR,46:$V1,47:$V2,48:$V3,49:$V4,50:$V5,57:189,79:$VS,82:$VT,86:$VU,92:$VV,93:$VW,95:$VX,98:$V7},{77:[1,343]},{91:[2,102]}],
defaultActions: {20:[2,1],199:[2,88],201:[2,123],202:[2,124],203:[2,125],204:[2,126],205:[2,127],206:[2,128],207:[2,129],208:[2,130],244:[2,89],300:[2,101],310:[2,109],311:[2,110],326:[2,99],343:[2,102]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TIPO_OPERACION = require('./controller/Enums/TipoOperacion');
    const TIPO_VALOR = require('./controller/Enums/TipoValor');
    
    const TIPO_DATO = require('./controller/Enums/TipoDato');
   
    const INSTRUCCION = require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 60
break;
case 4:return 49;
break;
case 5:return 47;
break;
case 6:return 48;
break;
case 7:return 46;
break;
case 8:return 50;
break;
case 9:return 61;
break;
case 10:return 62;
break;
case 11:return 74;
break;
case 12:return 66;
break;
case 13:return 65;
break;
case 14:return 67;
break;
case 15:return 63;
break;
case 16:return 78;
break;
case 17:return 64;
break;
case 18:return 79;
break;
case 19:return 81;
break;
case 20:return 80;
break;
case 21:return 68
break;
case 22:return 51;
break;
case 23:return 54;
break;
case 24:return 53;
break;
case 25:return 52;
break;
case 26:return 31;
break;
case 27:return 55;
break;
case 28:return 56;
break;
case 29:return 'interrogacion';
break;
case 30:return 89;
break;
case 31:return 71;
break;
case 32:return 69;
break;
case 33:return 70;
break;
case 34:return 44;
break;
case 35:return 45;
break;
case 36:return 72;
break;
case 37:return 73;
break;
case 38:return 9;
break;
case 39:return 75;
break;
case 40:return 77;
break;
case 41:return "saltoln";
break;
case 42:return "Barrainv";
break;
case 43:return "comilladoble";
break;
case 44:return 82;
break;
case 45:return 91;
break;
case 46:return 86;
break;
case 47:return 88;
break;
case 48:return 90;
break;
case 49:return 23;
break;
case 50:return 27;
break;
case 51:return 43;
break;
case 52:return 92;
break;
case 53:return 95;
break;
case 54:return 93;
break;
case 55:return 97;
break;
case 56:return 98;
break;
case 57:return 99;
break;
case 58:return 100;
break;
case 59:return 101;
break;
case 60:return 102;
break;
case 61:return 103;
break;
case 62:return 104;
break;
case 63:return 105;
break;
case 64:return 106;
break;
case 65:return 107;
break;
case 66:return 30;
break;
case 67:return 58;
break;
case 68:return 59;
break;
case 69:return 5;
break;
case 70: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:,)/i,/^(?:>)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:\.)/i,/^(?:==)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:=)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:Default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:TypeOf\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:'[^\"]?')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}