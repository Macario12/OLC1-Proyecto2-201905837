/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,14],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,11],$V7=[1,13],$V8=[1,22],$V9=[1,23],$Va=[29,44,62,71],$Vb=[2,53],$Vc=[1,28],$Vd=[1,29],$Ve=[1,33],$Vf=[1,32],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,39],$Vk=[1,40],$Vl=[1,47],$Vm=[1,43],$Vn=[1,45],$Vo=[1,44],$Vp=[5,20,26,29,42,44,45,46,47,48,49,51,56,57,58,60,61,67,68,69,74,79,81,83,85,86,88,97],$Vq=[1,75],$Vr=[1,76],$Vs=[1,77],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[9,30,44,50,51,52,53,54,55,70,71,90,91,92,93,94,95],$Vx=[2,70],$Vy=[9,20,26,29,30,42,44,45,46,47,48,49,50,51,52,53,54,55,67,69,70,71,74,79,81,83,85,86,88,90,91,92,93,94,95,97],$Vz=[44,67],$VA=[1,88],$VB=[1,149],$VC=[1,155],$VD=[1,160],$VE=[1,166],$VF=[1,161],$VG=[1,158],$VH=[1,162],$VI=[1,163],$VJ=[1,164],$VK=[1,165],$VL=[9,30,44,50,51,70,71,90,91,92,93,94,95],$VM=[9,30,44,50,51,52,53,55,70,71,90,91,92,93,94,95],$VN=[67,81,83],$VO=[20,26,29,42,45,46,47,48,49,67,69,74,79,81,83,85,86,88,97],$VP=[9,44],$VQ=[1,267],$VR=[1,268],$VS=[1,269],$VT=[1,281],$VU=[1,282],$VV=[29,51,56,57,58,60,61],$VW=[1,305],$VX=[1,306],$VY=[1,313],$VZ=[20,26,29,42,45,46,47,48,49,69,74,79,85,86,88,97];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPO":4,"EOF":5,"OPCIONESCUERPO":6,"DEC_VAR":7,"INICIALIZACION":8,"ptcoma":9,"METODOS":10,"FUNCIONES":11,"CALLS":12,"PRINT":13,"CUERPOMETODO":14,"IFS":15,"DECLAVECT":16,"MODDIFIC":17,"DECLALIST":18,"ADDLIST":19,"break":20,"SWITCHS":21,"WHILES":22,"FORS":23,"DOWHILE":24,"RETURN":25,"continue":26,"LLAMADAS":27,"TIPO":28,"identificador":29,"igual":30,"EXP":31,"CASTEO":32,"ACCESS":33,"TOLOWEER":34,"TOUPPER":35,"LENGTH":36,"TRUNCATE":37,"ROUND":38,"TYPEOF":39,"TOSTRING":40,"TOCHARARRAY":41,"return":42,"parA":43,"parC":44,"char":45,"boolean":46,"double":47,"int":48,"string":49,"mas":50,"menos":51,"div":52,"multi":53,"exponente":54,"modulo":55,"cadena":56,"caracter":57,"numeros":58,"BOOL":59,"true":60,"false":61,"corA":62,"corC":63,"new":64,"llaveA":65,"EXPRESIONES":66,"llaveC":67,"coma":68,"list":69,"menor":70,"mayor":71,"punto":72,"add":73,"if":74,"CONDICIONES":75,"CONTINAUCIONIF":76,"ELSEIF":77,"ELSES":78,"switch":79,"CUERPOSWITCH":80,"case":81,"dospts":82,"default":83,"else":84,"while":85,"for":86,"INCRE":87,"do":88,"LOGICO":89,"mayorigual":90,"igualigual":91,"menorigual":92,"or":93,"and":94,"not":95,"void":96,"print":97,"tolower":98,"toupper":99,"length":100,"truncate":101,"round":102,"typeof":103,"tostring":104,"tochararray":105,"EXEC":106,"exec":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"ptcoma",20:"break",26:"continue",29:"identificador",30:"igual",42:"return",43:"parA",44:"parC",45:"char",46:"boolean",47:"double",48:"int",49:"string",50:"mas",51:"menos",52:"div",53:"multi",54:"exponente",55:"modulo",56:"cadena",57:"caracter",58:"numeros",60:"true",61:"false",62:"corA",63:"corC",64:"new",65:"llaveA",67:"llaveC",68:"coma",69:"list",70:"menor",71:"mayor",72:"punto",73:"add",74:"if",79:"switch",81:"case",82:"dospts",83:"default",84:"else",85:"while",86:"for",88:"do",90:"mayorigual",91:"igualigual",92:"menorigual",93:"or",94:"and",95:"not",96:"void",97:"print",98:"tolower",99:"toupper",100:"length",101:"truncate",102:"round",103:"typeof",104:"tostring",105:"tochararray",107:"exec"},
productions_: [0,[3,2],[6,2],[6,1],[4,1],[4,3],[4,1],[4,1],[4,1],[4,1],[4,1],[14,2],[14,2],[14,3],[14,2],[14,2],[14,2],[14,2],[14,3],[14,2],[14,2],[14,1],[14,1],[14,2],[14,1],[14,1],[14,1],[14,1],[14,2],[14,2],[14,1],[14,2],[14,1],[14,2],[14,1],[14,2],[14,1],[14,2],[14,1],[14,2],[14,1],[7,3],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,2],[25,3],[25,2],[8,4],[32,4],[28,1],[28,1],[28,1],[28,1],[28,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[59,1],[59,1],[16,10],[16,8],[66,3],[66,3],[66,3],[66,3],[66,3],[66,1],[66,1],[66,1],[66,1],[66,1],[33,4],[33,6],[17,7],[17,9],[18,12],[19,7],[15,8],[15,7],[76,2],[76,1],[21,7],[80,5],[80,4],[80,3],[77,8],[78,4],[22,7],[23,11],[23,10],[23,11],[24,9],[87,2],[87,2],[75,5],[75,5],[75,6],[75,5],[75,5],[75,3],[75,3],[75,3],[75,3],[75,4],[75,1],[89,1],[89,1],[89,1],[11,8],[11,7],[10,8],[10,7],[27,4],[27,3],[12,2],[13,5],[34,4],[35,4],[36,4],[37,4],[38,4],[39,4],[40,4],[41,4],[106,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$02];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 6: case 7: case 8: case 9: case 10:
this.$=$$[$0]
break;
case 5:
this.$=$$[$0-2]
break;
case 74:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.INT, this._$.first_line,this._$.first_column+1)
break;
case 134:
this.$ = new INSTRUCCION.nuevoPrint($$[$0-1], this._$.first_line, this._$.first_column+1)
break;
}
},
table: [{3:1,4:2,7:3,8:4,10:5,11:6,12:7,13:8,27:12,28:9,29:$V0,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,96:$V6,97:$V7},{1:[3]},{5:[1,19]},{5:[2,4]},{5:[2,7],9:[1,20]},{5:[2,6]},{5:[2,8]},{5:[2,9]},{5:[2,10]},{29:[1,21]},{30:$V8,43:$V9},{29:[1,24]},{9:[1,25]},{43:[1,26]},o($Va,[2,58]),o($Va,[2,59]),o($Va,[2,60]),o($Va,[2,61]),o($Va,[2,62]),{1:[2,1]},{4:27,7:3,8:4,10:5,11:6,12:7,13:8,27:12,28:9,29:$V0,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,96:$V6,97:$V7},{5:$Vb,9:$Vc,30:$Vd,43:[1,30]},{27:34,29:$Ve,31:31,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{7:46,28:48,29:$Vl,44:[1,42],45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vm,57:$Vn,58:$Vo,66:41},{43:[1,49]},{5:[2,133]},{27:34,29:$Ve,31:50,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{5:[2,5]},o($Vp,[2,41]),{27:34,29:[1,62],31:51,32:52,33:53,34:54,35:55,36:56,37:57,38:58,39:59,40:60,41:61,43:[1,63],51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,98:[1,64],99:[1,65],100:[1,66],101:[1,67],102:[1,68],103:[1,69],104:[1,70],105:[1,71]},{7:46,28:48,29:$Vl,44:[1,73],45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vm,57:$Vn,58:$Vo,66:72},{9:[1,74],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{27:34,29:$Ve,31:81,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},o($Vw,$Vx,{43:$V9}),o($Vw,[2,71]),o($Vw,[2,72]),o($Vw,[2,73]),o($Vw,[2,74]),o($Vw,[2,75]),o($Vw,[2,76]),o($Vw,[2,77]),{44:[1,82]},o($Vy,[2,132]),o($Vz,[2,88],{68:[1,83]}),o($Vz,[2,89],{68:[1,84]}),o($Vz,[2,87],{68:[1,85]}),o($Vz,[2,85],{68:[1,86]}),o($Vz,[2,86],{68:[1,87]}),{29:$VA},{7:46,28:48,29:$Vl,44:[1,90],45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vm,57:$Vn,58:$Vo,66:89},{44:[1,91],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{9:[1,92],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{9:[1,93]},{9:[1,94]},{9:[1,95]},{9:[1,96]},{9:[1,97]},{9:[1,98]},{9:[1,99]},{9:[1,100]},{9:[1,101]},{9:[1,102]},o([9,50,51,52,53,54,55],$Vx,{43:$V9,62:[1,103]}),{28:104,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5},{43:[1,105]},{43:[1,106]},{43:[1,107]},{43:[1,108]},{43:[1,109]},{43:[1,110]},{43:[1,111]},{43:[1,112]},{44:[1,113]},{65:[1,114]},o([5,9,29,44,51,56,57,58,60,61],[2,56]),{27:34,29:$Ve,31:115,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:116,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:117,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:118,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:119,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:120,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},o($Vw,[2,68]),o($Vy,[2,131]),{7:46,28:48,29:$Vl,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vm,57:$Vn,58:$Vo,66:121},{7:46,28:48,29:$Vl,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vm,57:$Vn,58:$Vo,66:122},{7:46,28:48,29:$Vl,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vm,57:$Vn,58:$Vo,66:123},{7:46,28:48,29:$Vl,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vm,57:$Vn,58:$Vo,66:124},{7:46,28:48,29:$Vl,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vm,57:$Vn,58:$Vo,66:125},o([20,26,29,42,44,45,46,47,48,49,51,56,57,58,60,61,67,68,69,74,79,81,83,85,86,88,97],$Vb,{9:$Vc,30:$Vd}),{44:[1,126]},{65:[1,127]},{9:[1,128]},o($Vp,[2,42]),o($Vp,[2,43]),o($Vp,[2,44]),o($Vp,[2,45]),o($Vp,[2,46]),o($Vp,[2,47]),o($Vp,[2,48]),o($Vp,[2,49]),o($Vp,[2,50]),o($Vp,[2,51]),o($Vp,[2,52]),{58:[1,129],62:[1,130]},{44:[1,131]},{27:34,29:$Ve,31:132,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:133,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:134,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:135,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:136,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:137,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:138,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:139,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{65:[1,140]},{7:143,8:144,13:157,14:141,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},o($VL,[2,63],{52:$Vs,53:$Vt,54:$Vu,55:$Vv}),o($VL,[2,64],{52:$Vs,53:$Vt,54:$Vu,55:$Vv}),o($VM,[2,65],{54:$Vu}),o($VM,[2,66],{54:$Vu}),o($Vw,[2,67]),o($VM,[2,69],{54:$Vu}),o($Vz,[2,80]),o($Vz,[2,81]),o($Vz,[2,82]),o($Vz,[2,83]),o($Vz,[2,84]),{65:[1,167]},{7:143,8:144,13:157,14:168,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},o([5,20,26,29,42,45,46,47,48,49,67,69,74,79,81,83,85,86,88,97],[2,134]),{63:[1,169]},{58:[1,170]},{27:34,29:$Ve,31:171,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{44:[1,172],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{44:[1,173],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{44:[1,174],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{44:[1,175],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{44:[1,176],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{44:[1,177],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{44:[1,178],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{44:[1,179],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{7:143,8:144,13:157,14:180,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},{67:[1,181]},o($VN,[2,21],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:182,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,22],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:183,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),{9:[1,184]},o($VN,[2,24],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:185,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,25],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:186,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,26],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:187,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,27],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:188,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),{9:[1,189]},{7:143,8:144,13:157,14:190,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},{7:143,8:144,13:157,14:191,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},o($VN,[2,30],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:192,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,32],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:193,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,34],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:194,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,36],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:195,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,38],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:196,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,40],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:197,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),{43:[1,198]},{29:$VA,62:[1,199]},{30:$V8,43:$V9,62:[1,200],72:[1,201]},{70:[1,202]},{43:[1,203]},{43:[1,204]},{43:[1,205]},{65:[1,206]},{9:[1,208],27:34,29:$Ve,31:207,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{7:143,8:144,13:157,14:209,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},{67:[1,210]},{9:[2,90]},{63:[1,211]},{9:[2,57],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{9:[2,135]},{9:[2,136]},{9:[2,137]},{9:[2,138]},{9:[2,139]},{9:[2,140]},{9:[2,141]},{9:[2,142]},{67:[1,212]},{5:[2,128]},o($VN,[2,11]),o($VN,[2,12]),o($VN,[2,23],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:213,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,14]),o($VN,[2,15]),o($VN,[2,16]),o($VN,[2,17]),o($VN,[2,28],{15:142,7:143,8:144,16:145,17:146,18:147,19:148,21:150,22:151,23:152,24:153,25:154,27:156,13:157,28:159,14:214,20:$VB,26:$VC,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7}),o($VN,[2,19]),o($VN,[2,20]),o($VN,[2,29]),o($VN,[2,31]),o($VN,[2,33]),o($VN,[2,35]),o($VN,[2,37]),o($VN,[2,39]),{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:215},{63:[1,217]},{58:[1,218],62:[1,219]},{73:[1,220]},{28:221,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5},{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:222},{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:223},{7:224,8:225,28:48,29:[1,226],45:$V1,46:$V2,47:$V3,48:$V4,49:$V5},{7:143,8:144,13:157,14:227,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},{9:[1,228],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},o($VO,[2,55]),{67:[1,229]},{5:[2,130]},{63:[1,230]},{5:[2,127]},o($VN,[2,13]),o($VN,[2,18]),{44:[1,231]},o($VP,[2,123],{30:[1,234],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,70:[1,233],71:[1,232],90:[1,235],91:[1,236],92:[1,237]}),{29:[1,238]},{63:[1,239]},{58:[1,240]},{43:[1,241]},{71:[1,242]},{44:[1,243]},{44:[1,244]},{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:245},{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:246},{30:$V8},{67:[1,247]},o($VO,[2,54]),{5:[2,129]},{9:[2,91]},{65:[1,248]},{27:34,29:$Ve,31:249,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:250,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{30:[1,251]},{27:34,29:$Ve,31:252,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:253,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{27:34,29:$Ve,31:254,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{30:[1,255]},{30:[1,256]},{63:[1,257]},{27:34,29:$Ve,31:258,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{29:[1,259]},{65:[1,260]},{65:[1,261]},{9:[1,262]},{9:[1,263]},{85:[1,264]},{7:143,8:144,13:157,14:265,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},o($VP,[2,118],{89:266,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,93:$VQ,94:$VR,95:$VS}),o($VP,[2,119],{89:270,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,93:$VQ,94:$VR,95:$VS}),{27:34,29:$Ve,31:271,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},o($VP,[2,121],{89:272,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,93:$VQ,94:$VR,95:$VS}),{50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,89:273,93:$VQ,94:$VR,95:$VS},o($VP,[2,120],{50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv}),{64:[1,274],65:[1,275]},{27:34,29:$Ve,31:276,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},{63:[1,277]},{44:[1,278],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{30:[1,279]},{80:280,81:$VT,83:$VU},{7:143,8:144,13:157,14:283,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},{29:[1,284]},{8:285,29:[1,286]},{43:[1,287]},{67:[1,288]},{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:289},o($VV,[2,124]),o($VV,[2,125]),o($VV,[2,126]),{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:290},o($VP,[2,122],{89:291,50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,93:$VQ,94:$VR,95:$VS}),{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:292},{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:293},{28:294,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5},{7:46,28:48,29:$Vl,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vm,57:$Vn,58:$Vo,66:295},{9:[1,296],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{30:[1,297]},{9:[1,298]},{64:[1,299]},{67:[1,300]},{58:[1,301]},{82:[1,302]},{67:[1,303]},{50:$VW,51:$VX,87:304},{44:[1,307]},{30:$V8,50:$VW,51:$VX,87:308},{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:309},o($VO,[2,97],{76:310,77:311,78:312,84:$VY}),o($VP,[2,113]),o($VP,[2,114]),{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:314},o($VP,[2,116]),o($VP,[2,117]),{62:[1,315]},{67:[1,316]},o($VO,[2,92]),{27:34,29:$Ve,31:317,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk},o($VO,[2,95]),{69:[1,318]},o($VZ,[2,100]),{82:[1,319]},{7:143,8:144,13:157,14:320,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},o($VZ,[2,106]),{44:[1,321]},{50:[1,322]},{51:[1,323]},{65:[1,324]},{44:[1,325]},{44:[1,326]},o($VO,[2,96]),{76:327,77:311,78:312,84:$VY},o($VO,[2,99]),{65:[1,329],74:[1,328]},o($VP,[2,115]),{58:[1,330]},o($VO,[2,79]),{9:[1,331],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv},{70:[1,332]},{7:143,8:144,13:157,14:333,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},{67:[2,103]},{65:[1,334]},{44:[2,111]},{44:[2,112]},{7:143,8:144,13:157,14:335,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},{65:[1,336]},{9:[1,337]},o($VO,[2,98]),{43:[1,338]},{7:143,8:144,13:157,14:339,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},{63:[1,340]},o($VO,[2,93]),{28:341,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5},{67:[2,102],80:342,81:$VT,83:$VU},{7:143,8:144,13:157,14:343,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},{67:[1,344]},{7:143,8:144,13:157,14:345,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},o($VO,[2,110]),{27:34,29:$Ve,31:216,51:$Vf,56:$Vg,57:$Vh,58:$Vi,59:38,60:$Vj,61:$Vk,75:346},{67:[1,347]},o($VO,[2,78]),{71:[1,348]},{67:[2,101]},{67:[1,349]},o($VO,[2,108]),{67:[1,350]},{44:[1,351]},o($VO,[2,105]),{9:[1,352]},o($VO,[2,107]),o($VO,[2,109]),{65:[1,353]},o($VO,[2,94]),{7:143,8:144,13:157,14:354,15:142,16:145,17:146,18:147,19:148,20:$VB,21:150,22:151,23:152,24:153,25:154,26:$VC,27:156,28:159,29:$VD,42:$VE,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,69:$VF,74:$VG,79:$VH,85:$VI,86:$VJ,88:$VK,97:$V7},{67:[1,355]},{84:[2,104]}],
defaultActions: {3:[2,4],5:[2,6],6:[2,8],7:[2,9],8:[2,10],19:[2,1],25:[2,133],27:[2,5],169:[2,90],172:[2,135],173:[2,136],174:[2,137],175:[2,138],176:[2,139],177:[2,140],178:[2,141],179:[2,142],181:[2,128],210:[2,130],212:[2,127],229:[2,129],230:[2,91],320:[2,103],322:[2,111],323:[2,112],342:[2,101],355:[2,104]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TIPO_OPERACION = require('./controller/Enums/TipoOperacion');
    const TIPO_VALOR = require('./controller/Enums/TipoValor');
    
    const TIPO_DATO = require('./controller/Enums/TipoDato');
   
    const INSTRUCCION = require('./controller/Instruccion/Instruccion')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 58
break;
case 4:return 48;
break;
case 5:return 46;
break;
case 6:return 47;
break;
case 7:return 45;
break;
case 8:return 49;
break;
case 9:return 60;
break;
case 10:return 61;
break;
case 11:return 64;
break;
case 12:return 69;
break;
case 13:return 73;
break;
case 14:return 72;
break;
case 15:return 50;
break;
case 16:return 53;
break;
case 17:return 52;
break;
case 18:return 51;
break;
case 19:return 30;
break;
case 20:return 54;
break;
case 21:return 55;
break;
case 22:return 'diferencia';
break;
case 23:return 70;
break;
case 24:return 92;
break;
case 25:return 68;
break;
case 26:return 71;
break;
case 27:return 90;
break;
case 28:return 'interrogacion';
break;
case 29:return 82;
break;
case 30:return 95;
break;
case 31:return 93;
break;
case 32:return 94;
break;
case 33:return 43;
break;
case 34:return 44;
break;
case 35:return 62;
break;
case 36:return 63;
break;
case 37:return 9;
break;
case 38:return 65;
break;
case 39:return 67;
break;
case 40:return "saltoln";
break;
case 41:return "Barrainv";
break;
case 42:return "comilladoble";
break;
case 43:return 74;
break;
case 44:return 84;
break;
case 45:return 79;
break;
case 46:return 81;
break;
case 47:return 83;
break;
case 48:return 20;
break;
case 49:return 26;
break;
case 50:return 42;
break;
case 51:return 85;
break;
case 52:return 88;
break;
case 53:return 86;
break;
case 54:return 96;
break;
case 55:return 97;
break;
case 56:return 98;
break;
case 57:return 99;
break;
case 58:return 100;
break;
case 59:return 101;
break;
case 60:return 102;
break;
case 61:return 103;
break;
case 62:return 104;
break;
case 63:return 105;
break;
case 64:return 107;
break;
case 65:return 29;
break;
case 66:return 56;
break;
case 67:return 57;
break;
case 68:return 5;
break;
case 69: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:=)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:,)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:Default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:TypeOf\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\""])*["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}