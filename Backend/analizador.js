/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[5,32,51,52,53,54,55,106,107,116],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[32,50,69,77],$Ve=[2,45],$Vf=[1,35],$Vg=[1,36],$Vh=[1,41],$Vi=[1,39],$Vj=[1,40],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[10,50],$Vr=[5,10,28,30,32,45,49,51,52,53,54,55,57,63,64,65,66,67,76,82,87,90,94,95,99,101,102,104,106,107,116],$Vs=[5,28,30,32,45,49,51,52,53,54,55,57,63,64,65,66,67,76,82,87,90,94,95,99,101,102,104,106,107,116],$Vt=[1,79],$Vu=[1,80],$Vv=[1,81],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[10,50,56,57,58,59,60,61,68,69,70,71,72,73,74,75,84,96],$VI=[2,66],$VJ=[1,96],$VK=[1,95],$VL=[1,97],$VM=[1,128],$VN=[50,84],$VO=[10,50,74,75,84,96],$VP=[5,28,30,32,45,51,52,53,54,55,82,87,90,94,95,99,101,102,104,106,107,116],$VQ=[1,153],$VR=[1,182],$VS=[1,191],$VT=[1,189],$VU=[1,194],$VV=[1,190],$VW=[1,187],$VX=[1,185],$VY=[1,186],$VZ=[1,192],$V_=[1,193],$V$=[10,50,56,57,68,69,70,71,72,73,74,75,84,96],$V01=[10,50,56,57,58,59,61,68,69,70,71,72,73,74,75,84,96],$V11=[10,50,68,69,70,71,72,73,74,75,84,96],$V21=[28,30,32,45,51,52,53,54,55,82,87,90,94,95,99,101,102,104,107],$V31=[1,219],$V41=[32,49,57,63,64,65,66,67,76],$V51=[1,274],$V61=[82,95,99],$V71=[1,317],$V81=[28,30,32,45,51,52,53,54,55,82,87,90,91,94,95,99,101,102,104,107];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"ptyComa":6,"CUERPO":7,"DEC_VAR":8,"INICIALIZACION":9,"ptcoma":10,"METODOS":11,"FUNCIONES":12,"PRINT":13,"EXEC":14,"OPCIONESMETODS":15,"CUERPOMETODO":16,"SWITCHS":17,"WHILES":18,"IFS":19,"DECLAVECT":20,"MODDIFIC":21,"DECLALIST":22,"ADDLIST":23,"BREAK":24,"FORS":25,"DOWHILE":26,"RETURN":27,"continue":28,"CALLS":29,"break":30,"TIPO":31,"identificador":32,"igual":33,"EXP":34,"CASTEO":35,"ACCESS":36,"TOLOWEER":37,"TOUPPER":38,"LENGTH":39,"TRUNCATE":40,"ROUND":41,"TYPEOF":42,"TOSTRING":43,"TOCHARARRAY":44,"return":45,"AUM":46,"menosmenos":47,"masmas":48,"parA":49,"parC":50,"char":51,"boolean":52,"double":53,"int":54,"string":55,"mas":56,"menos":57,"div":58,"multi":59,"exponente":60,"modulo":61,"LLAMADAS":62,"cadena":63,"caracter":64,"numeros":65,"true":66,"false":67,"menor":68,"mayor":69,"menorigual":70,"mayorigual":71,"diferencia":72,"igualigual":73,"or":74,"and":75,"not":76,"corA":77,"corC":78,"new":79,"llaveA":80,"EXPRESIONES":81,"llaveC":82,"LISTAVALORES":83,"coma":84,"LISTAPARAMETROS":85,"PARAMETROS":86,"list":87,"punto":88,"add":89,"if":90,"else":91,"ELSEIFS":92,"CONELSEIF":93,"switch":94,"default":95,"dospts":96,"CASES":97,"CONCASE":98,"case":99,"ELSEIF":100,"while":101,"for":102,"INIFOR":103,"do":104,"LOGICO":105,"void":106,"print":107,"tolower":108,"toupper":109,"length":110,"truncate":111,"round":112,"typeof":113,"tostring":114,"tochararray":115,"exec":116,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"ptyComa",10:"ptcoma",28:"continue",30:"break",32:"identificador",33:"igual",45:"return",47:"menosmenos",48:"masmas",49:"parA",50:"parC",51:"char",52:"boolean",53:"double",54:"int",55:"string",56:"mas",57:"menos",58:"div",59:"multi",60:"exponente",61:"modulo",63:"cadena",64:"caracter",65:"numeros",66:"true",67:"false",68:"menor",69:"mayor",70:"menorigual",71:"mayorigual",72:"diferencia",73:"igualigual",74:"or",75:"and",76:"not",77:"corA",78:"corC",79:"new",80:"llaveA",81:"EXPRESIONES",82:"llaveC",84:"coma",87:"list",88:"punto",89:"add",90:"if",91:"else",94:"switch",95:"default",96:"dospts",99:"case",101:"while",102:"for",104:"do",106:"void",107:"print",108:"tolower",109:"toupper",110:"length",111:"truncate",112:"round",113:"typeof",114:"tostring",115:"tochararray",116:"exec"},
productions_: [0,[3,2],[3,2],[3,0],[4,2],[4,1],[7,1],[7,3],[7,1],[7,1],[7,1],[7,1],[7,1],[15,2],[15,1],[16,1],[16,1],[16,1],[16,1],[16,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[24,2],[8,3],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,5],[8,2],[27,3],[27,2],[9,4],[9,2],[46,2],[46,2],[35,4],[31,1],[31,1],[31,1],[31,1],[31,1],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,2],[34,2],[20,10],[20,8],[83,3],[83,1],[85,3],[85,1],[86,2],[36,4],[36,6],[21,7],[21,9],[22,12],[23,7],[19,7],[19,11],[19,8],[19,12],[92,2],[92,1],[93,8],[17,9],[17,7],[17,10],[97,2],[97,1],[98,4],[100,8],[18,7],[25,10],[103,1],[103,1],[26,9],[105,1],[105,1],[105,1],[12,8],[12,7],[11,8],[11,7],[62,4],[62,3],[29,2],[13,5],[13,4],[37,4],[38,4],[39,4],[40,4],[41,4],[42,4],[43,4],[44,4],[14,5],[14,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
respuesta.errorSintactico = ""; respuesta.listaIns = $$[$0-1]; return respuesta;
break;
case 2:
 respuesta.errorSintactico  =  "Error Sintactico: " + "Linea: "  + (this._$.first_line-1) + ", Columna: " + this._$.first_column ; return respuesta; 
break;
case 4: case 13:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 5: case 14: case 89: case 102: case 108:
this.$=[$$[$0]];
break;
case 6: case 8: case 9: case 10: case 11: case 12: case 15: case 16: case 17: case 18: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31:
this.$=$$[$0]
break;
case 7: case 19:
this.$=$$[$0-2]
break;
case 32:
this.$ = INSTRUCCION.nuevoBreak(this._$.first_line,this._$.first_column+1)
break;
case 33:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-1],null, $$[$0-2],this._$.first_line,this._$.first_column+1, idSentencia); idSentencia += 5;
break;
case 34:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0-3],$$[$0-1], $$[$0-4],this._$.first_line,this._$.first_column+1, idSentencia); idSentencia += 5;
break;
case 48:
this.$=INSTRUCCION.nuevaAsignacion($$[$0-3],$$[$0-1],this._$.first_line,this._$.first_column+1, idSentencia); idSentencia += 4;
break;
case 49: case 60: case 125:
this.$ = $$[$0-1]
break;
case 50:
 this.$ = INSTRUCCION.nuevaAsignacion($$[$0-1],INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1), INSTRUCCION.nuevoValor(1, TIPO_VALOR.INT, this._$.first_line,this._$.first_column+1), TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1),this._$.first_line,this._$.first_column+1, idSentencia++);
break;
case 51:
 this.$ = INSTRUCCION.nuevaAsignacion($$[$0-1],INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1), INSTRUCCION.nuevoValor(1, TIPO_VALOR.INT, this._$.first_line,this._$.first_column+1), TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1),this._$.first_line,this._$.first_column+1, idSentencia++);
break;
case 53:
this.$ = TIPO_DATO.CHAR
break;
case 54:
this.$= TIPO_DATO.BOOLEAN
break;
case 55:
this.$ =TIPO_DATO.INT
break;
case 56:
this.$ = TIPO_DATO.INT
break;
case 57:
this.$ = TIPO_DATO.STRING
break;
case 58:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 59:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 61:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 62:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 63:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 64:
this.$ = INSTRUCCION.nuevaOperacionBinaria(1, $$[$0], TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 65:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 66:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 2;
break;
case 68:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.STRING, this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 2;
break;
case 69:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CHAR, this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 2;
break;
case 70:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.INT, this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 2;
break;
case 71:
this.$ = INSTRUCCION.nuevoValor(($$[$0]), TIPO_VALOR.BOOLEAN, this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 2;
break;
case 72:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BOOLEAN, this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 2;
break;
case 73:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENOR,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 74:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 75:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 76:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 77:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 78:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 79:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.OR,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 80:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.AND,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 81:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0], null, TIPO_OPERACION.NOT,this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 82:
this.$ = INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1), INSTRUCCION.nuevoValor(1, TIPO_VALOR.INT, this._$.first_line,this._$.first_column+1), TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1)
break;
case 83:
this.$ = INSTRUCCION.nuevaOperacionBinaria(INSTRUCCION.nuevoValor($$[$0-1], TIPO_VALOR.IDENTIFICADOR, this._$.first_line,this._$.first_column+1), INSTRUCCION.nuevoValor(1, TIPO_VALOR.INT, this._$.first_line,this._$.first_column+1), TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1)
break;
case 86:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 87:
this.$=[$$[$0]]
break;
case 88:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 90:
 this.$ = INSTRUCCION.nuevaDeclaracion($$[$0],null, $$[$0-1],this._$.first_line,this._$.first_column+1,idSentencia); idSentencia += 2
break;
case 97:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1],this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 8;
break;
case 98:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5],$$[$0-1],this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 8;
break;
case 99:
this.$ = new INSTRUCCION.nuevoIfConElseIf($$[$0-5], $$[$0-2],$$[$0],null,this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 8;
break;
case 100:
this.$ = new INSTRUCCION.nuevoIfConElseIf($$[$0-9], $$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 8;
break;
case 101: case 107:
$$[$0-1].push($$[$0]); this.$=$$[$0-1]
break;
case 103:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1],this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 9;
break;
case 104:
this.$ = new INSTRUCCION.nuevoSwitchDefault($$[$0-6],$$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 105:
this.$ = new INSTRUCCION.nuevoSwitchConCase($$[$0-4],$$[$0-1],null,this._$.first_line, this._$.first_column+1)
break;
case 106:
this.$ = new INSTRUCCION.nuevoSwitchConCase($$[$0-7],$$[$0-4],$$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 109:
this.$ = new INSTRUCCION.nuevoCase($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 111:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1],this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 8;
break;
case 112:
this.$ = new INSTRUCCION.nuevoFor($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1],this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 12;
break;
case 113: case 114:
this.$ = $$[$0]
break;
case 115:
this.$ = new INSTRUCCION.nuevoDoWhile($$[$0-2], $$[$0-6],this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 10 
break;
case 121:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1] , this._$.first_line, this._$.first_column+1 , idSentencia); idSentencia += 9
break;
case 122:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1] , this._$.first_line, this._$.first_column+1 , idSentencia); idSentencia += 9
break;
case 123:
this.$= INSTRUCCION.nuevaLlamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 5 
break;
case 124:
this.$= INSTRUCCION.nuevaLlamada($$[$0-2], null, this._$.first_line, this._$.first_column+1, idSentencia); idSentencia += 4 
break;
case 126:
this.$ = new INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 127:
this.$ = new INSTRUCCION.nuevoPrint( INSTRUCCION.nuevoValor("", TIPO_VALOR.STRING, this._$.first_line,this._$.first_column+1) , this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 3;
break;
case 136:
this.$ = INSTRUCCION.nuevoExec($$[$0-3],null, this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 5
break;
case 137:
this.$ = INSTRUCCION.nuevoExec($$[$0-4],$$[$0-2], this._$.first_line, this._$.first_column+1,idSentencia); idSentencia += 6
break;
}
},
table: [{1:[2,3],2:[1,3],3:1,4:2,7:4,8:5,9:6,11:7,12:8,13:9,14:10,31:11,32:$V0,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,106:$V6,107:$V7,116:$V8},{1:[3]},{5:[1,22],7:23,8:5,9:6,11:7,12:8,13:9,14:10,31:11,32:$V0,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,106:$V6,107:$V7,116:$V8},{6:[1,24]},o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,9],{10:[1,25]}),o($V9,[2,8]),o($V9,[2,10]),o($V9,[2,11]),o($V9,[2,12]),{32:[1,26]},{33:$Va,47:$Vb,48:$Vc},{10:[1,30]},{32:[1,31]},{49:[1,32]},{32:[1,33]},o($Vd,[2,53]),o($Vd,[2,54]),o($Vd,[2,55]),o($Vd,[2,56]),o($Vd,[2,57]),{1:[2,1]},o($V9,[2,4]),{1:[2,2]},{7:34,8:5,9:6,11:7,12:8,13:9,14:10,31:11,32:$V0,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,106:$V6,107:$V7,116:$V8},o($V9,$Ve,{10:$Vf,33:$Vg,49:[1,37]}),{32:$Vh,34:38,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},o($Vq,[2,50]),o($Vq,[2,51]),o($Vr,[2,49]),{49:[1,49]},{32:$Vh,34:50,49:$Vi,50:[1,51],57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{49:[1,52]},o($V9,[2,7]),o($Vs,[2,33]),{32:[1,65],34:53,35:54,36:55,37:56,38:57,39:58,40:59,41:60,42:61,43:62,44:63,49:[1,64],57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp,108:[1,66],109:[1,67],110:[1,68],111:[1,69],112:[1,70],113:[1,71],114:[1,72],115:[1,73]},{31:77,50:[1,75],51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,85:74,86:76},{10:[1,78],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{32:$Vh,34:93,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:94,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},o($VH,$VI,{47:$VJ,48:$VK,49:$VL}),o($VH,[2,67]),o($VH,[2,68]),o($VH,[2,69]),o($VH,[2,70]),o($VH,[2,71]),o($VH,[2,72]),{32:$Vh,34:98,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{31:77,50:[1,100],51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,85:99,86:76},{50:[1,101],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{10:[1,102]},{32:$Vh,34:105,49:$Vi,50:[1,103],57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp,83:104},{10:[1,106],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{10:[1,107]},{10:[1,108]},{10:[1,109]},{10:[1,110]},{10:[1,111]},{10:[1,112]},{10:[1,113]},{10:[1,114]},{10:[1,115]},{10:[1,116]},{31:117,32:$Vh,34:93,49:$Vi,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},o([10,56,57,58,59,60,61,68,69,70,71,72,73,74,75],$VI,{47:$VJ,48:$VK,49:$VL,77:[1,118]}),{49:[1,119]},{49:[1,120]},{49:[1,121]},{49:[1,122]},{49:[1,123]},{49:[1,124]},{49:[1,125]},{49:[1,126]},{50:[1,127],84:$VM},{80:[1,129]},o($VN,[2,89]),{32:[1,130]},o($Vr,[2,48]),{32:$Vh,34:131,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:132,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:133,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:134,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:135,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:136,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:137,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:138,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:139,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:140,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:141,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:142,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:143,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:144,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{50:[1,145],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},o($VH,[2,64]),o($VH,[2,82]),o($VH,[2,83]),{32:$Vh,34:105,49:$Vi,50:[1,147],57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp,83:146},o($VO,[2,81],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),{50:[1,148],84:$VM},{80:[1,149]},{10:[1,150]},o($VP,[2,127]),{10:[1,151]},{50:[1,152],84:$VQ},o($VN,[2,87],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($Vs,[2,34]),o($Vs,[2,35]),o($Vs,[2,36]),o($Vs,[2,37]),o($Vs,[2,38]),o($Vs,[2,39]),o($Vs,[2,40]),o($Vs,[2,41]),o($Vs,[2,42]),o($Vs,[2,43]),o($Vs,[2,44]),{50:[1,154]},{65:[1,155],77:[1,156]},{32:$Vh,34:157,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:158,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:159,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:160,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:161,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:162,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:163,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:164,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{80:[1,165]},{31:77,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,86:166},{8:172,9:173,13:184,15:167,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($VN,[2,90]),o($V$,[2,58],{58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($V$,[2,59],{58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($V01,[2,61],{60:$Vx}),o($V01,[2,62],{60:$Vx}),o($VH,[2,63]),o($V01,[2,65],{60:$Vx}),o($V11,[2,73],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($V11,[2,74],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($V11,[2,75],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($V11,[2,76],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($V11,[2,77],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o($V11,[2,78],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy}),o([10,50,74,84,96],[2,79],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VG}),o($VO,[2,80],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($VH,[2,60]),{50:[1,196],84:$VQ},o($VH,[2,124]),{80:[1,197]},{8:172,9:173,13:184,15:198,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($VP,[2,126]),o($V9,[2,136]),{10:[1,199]},{32:$Vh,34:200,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:201,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{78:[1,202]},{65:[1,203]},{50:[1,204],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{50:[1,205],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{50:[1,206],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{50:[1,207],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{50:[1,208],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{50:[1,209],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{50:[1,210],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{50:[1,211],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{8:172,9:173,13:184,15:212,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($VN,[2,88]),{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,213],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($V21,[2,14]),o($V21,[2,15]),o($V21,[2,16]),o($V21,[2,17]),o($V21,[2,18]),o($V21,[2,20],{10:[1,215]}),o($V21,[2,21]),o($V21,[2,22]),o($V21,[2,23]),o($V21,[2,24]),o($V21,[2,25]),o($V21,[2,26]),o($V21,[2,27]),o($V21,[2,28]),o($V21,[2,29]),o($V21,[2,30]),o($V21,[2,31]),{49:[1,216]},{49:[1,217]},{49:[1,218]},{32:$V31,77:[1,220]},{33:$Va,47:$Vb,48:$Vc,49:$VL,77:[1,221],88:[1,222]},{68:[1,223]},{10:[1,224]},{49:[1,225]},{80:[1,226]},{10:[1,228],32:$Vh,34:227,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{10:[1,229]},o($VH,[2,123]),{8:172,9:173,13:184,15:230,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,231],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($V9,[2,137]),o($VN,[2,86],{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),{10:[2,52],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{10:[2,91]},{78:[1,232]},{10:[2,128]},{10:[2,129]},{10:[2,130]},{10:[2,131]},{10:[2,132]},{10:[2,133]},{10:[2,134]},{10:[2,135]},{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,233],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($V9,[2,120]),o($V21,[2,13]),{8:172,9:173,13:184,16:234,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{32:$Vh,34:235,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:236,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:$Vh,34:237,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},o([28,30,32,45,49,51,52,53,54,55,57,63,64,65,66,67,76,82,87,90,94,95,99,101,102,104,107],$Ve,{10:$Vf,33:$Vg}),{78:[1,238]},{65:[1,239],77:[1,240]},{89:[1,241]},{31:242,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5},o($V21,[2,32]),{8:244,9:245,31:246,32:$V0,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,103:243},{8:172,9:173,13:184,15:247,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{10:[1,248],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},o($V21,[2,47]),o($V21,[2,125]),{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,249],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($V9,[2,122]),{78:[1,250]},o($V9,[2,119]),o($V21,[2,19]),{50:[1,251],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{50:[1,252],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{50:[1,253],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{32:[1,254]},{78:[1,255]},{65:[1,256]},{49:[1,257]},{69:[1,258]},{32:$Vh,34:259,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},o($V41,[2,113]),o($V41,[2,114]),{32:$V31},{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,260],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($V21,[2,46]),o($V9,[2,121]),{10:[2,92]},{80:[1,261]},{80:[1,262]},{80:[1,263]},{33:[1,264]},{33:[1,265]},{78:[1,266]},{32:$Vh,34:267,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{32:[1,268]},{10:[1,269],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{101:[1,270]},{95:[1,271],97:272,98:273,99:$V51},{8:172,9:173,13:184,15:275,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{8:172,9:173,13:184,15:276,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{79:[1,277],80:[1,278]},{32:$Vh,34:279,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{78:[1,280]},{50:[1,281],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{33:[1,282]},{32:[1,284],46:283},{49:[1,285]},{96:[1,286]},{82:[1,287],95:[1,288],98:289,99:$V51},o($V61,[2,108]),{32:$Vh,34:290,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,291],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,292],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{31:293,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5},{81:[1,294]},{10:[1,295],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{33:[1,296]},{10:[1,297]},{79:[1,298]},{50:[1,299]},{47:$Vb,48:$Vc},{32:$Vh,34:300,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{8:172,9:173,13:184,15:301,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($V21,[2,105]),{96:[1,302]},o($V61,[2,107]),{56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,96:[1,303]},o($V21,[2,111]),o($V21,[2,97],{92:305,93:306,91:[1,304]}),{77:[1,307]},{82:[1,308]},o($V21,[2,93]),{32:$Vh,34:309,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},o($V21,[2,96]),{87:[1,310]},{80:[1,311]},{50:[1,312],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,313],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{8:172,9:173,13:184,15:314,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{8:172,9:173,13:184,15:315,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{80:[1,316],90:$V71},o($V21,[2,99],{93:319,91:[1,318]}),o($V81,[2,102]),{65:[1,320]},o($V21,[2,85]),{10:[1,321],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{68:[1,322]},{8:172,9:173,13:184,15:323,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{10:[1,324]},o($V21,[2,104]),{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,325],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($V61,[2,109],{46:13,17:169,18:170,19:171,8:172,9:173,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,29:183,13:184,31:188,62:195,16:214,28:$VR,30:$VS,32:$VT,45:$VU,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7}),{8:172,9:173,13:184,15:326,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{49:[1,327]},{80:[1,328],90:$V71},o($V81,[2,101]),{78:[1,329]},o($V21,[2,94]),{31:330,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5},{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,331],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($V21,[2,115]),o($V21,[2,106]),{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,332],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{32:$Vh,34:333,49:$Vi,57:$Vj,62:42,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,76:$Vp},{8:172,9:173,13:184,15:334,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($V21,[2,84]),{69:[1,335]},o($V21,[2,112]),o($V21,[2,98]),{50:[1,336],56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,337],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{10:[1,338]},{80:[1,339]},o($V21,[2,100]),o($V21,[2,95]),{8:172,9:173,13:184,15:340,16:168,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},{8:172,9:173,13:184,16:214,17:169,18:170,19:171,20:174,21:175,22:176,23:177,24:178,25:179,26:180,27:181,28:$VR,29:183,30:$VS,31:188,32:$VT,45:$VU,46:13,51:$V1,52:$V2,53:$V3,54:$V4,55:$V5,62:195,82:[1,341],87:$VV,90:$VW,94:$VX,101:$VY,102:$VZ,104:$V_,107:$V7},o($V81,[2,103])],
defaultActions: {22:[2,1],24:[2,2],202:[2,91],204:[2,128],205:[2,129],206:[2,130],207:[2,131],208:[2,132],209:[2,133],210:[2,134],211:[2,135],250:[2,92]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const TIPO_OPERACION = require('./controller/Enums/TipoOperacion');
    const TIPO_VALOR = require('./controller/Enums/TipoValor');
    
    const TIPO_DATO = require('./controller/Enums/TipoDato');
   
    const INSTRUCCION = require('./controller/Instruccion/Instruccion');

        let idSentencia = 1;
        let respuesta = {
                listaIns: [],
                errorSintactico: ""
        };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 65
break;
case 4:return 54;
break;
case 5:return 52;
break;
case 6:return 53;
break;
case 7:return 51;
break;
case 8:return 55;
break;
case 9:return 66;
break;
case 10:return 67;
break;
case 11:return 79;
break;
case 12:return 73
break;
case 13:return 48;
break;
case 14:return 47;
break;
case 15:return 71;
break;
case 16:return 70;
break;
case 17:return 72;
break;
case 18:return 68;
break;
case 19:return 84;
break;
case 20:return 69;
break;
case 21:return 87;
break;
case 22:return 89;
break;
case 23:return 88;
break;
case 24:return 56;
break;
case 25:return 59;
break;
case 26:return 58;
break;
case 27:return 57;
break;
case 28:return 33;
break;
case 29:return 60;
break;
case 30:return 61;
break;
case 31:return 'interrogacion';
break;
case 32:return 96;
break;
case 33:return 76;
break;
case 34:return 74;
break;
case 35:return 75;
break;
case 36:return 49;
break;
case 37:return 50;
break;
case 38:return 77;
break;
case 39:return 78;
break;
case 40:return 10;
break;
case 41:return 80;
break;
case 42:return 82;
break;
case 43:return "saltoln";
break;
case 44:return "Barrainv";
break;
case 45:return "comilladoble";
break;
case 46:return 90;
break;
case 47:return 91;
break;
case 48:return 94;
break;
case 49:return 99;
break;
case 50:return 95;
break;
case 51:return 30;
break;
case 52:return 28;
break;
case 53:return 45;
break;
case 54:return 101;
break;
case 55:return 104;
break;
case 56:return 102;
break;
case 57:return 106;
break;
case 58:return 107;
break;
case 59:return 108;
break;
case 60:return 109;
break;
case 61:return 110;
break;
case 62:return 111;
break;
case 63:return 112;
break;
case 64:return 113;
break;
case 65:return 114;
break;
case 66:return 115;
break;
case 67:return 116;
break;
case 68:return 32;
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 63; 
break;
case 70: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 71:return 5;
break;
case 72: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:==)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:,)/i,/^(?:>)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:=)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:Default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:TypeOf\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:'[^\"]?')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}