/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,12],$V7=[1,14],$V8=[5,29,45,46,47,48,49,95,96],$V9=[1,24],$Va=[1,25],$Vb=[29,44,61,70],$Vc=[2,53],$Vd=[1,30],$Ve=[1,31],$Vf=[1,35],$Vg=[1,34],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[1,41],$Vm=[1,48],$Vn=[1,44],$Vo=[1,46],$Vp=[1,45],$Vq=[5,20,26,29,42,44,45,46,47,48,49,51,56,57,58,59,60,66,67,68,73,78,80,82,84,85,87,95,96],$Vr=[1,76],$Vs=[1,77],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[9,30,44,50,51,52,53,54,55,69,70,89,90,91,92,93,94],$Vy=[2,70],$Vz=[9,20,26,29,30,42,44,45,46,47,48,49,50,51,52,53,54,55,66,68,69,70,73,78,80,82,84,85,87,89,90,91,92,93,94,96],$VA=[44,66],$VB=[1,89],$VC=[1,150],$VD=[1,156],$VE=[1,161],$VF=[1,167],$VG=[1,162],$VH=[1,159],$VI=[1,163],$VJ=[1,164],$VK=[1,165],$VL=[1,166],$VM=[9,30,44,50,51,69,70,89,90,91,92,93,94],$VN=[9,30,44,50,51,52,53,55,69,70,89,90,91,92,93,94],$VO=[66,80,82],$VP=[20,26,29,42,45,46,47,48,49,66,68,73,78,80,82,84,85,87,96],$VQ=[9,44],$VR=[1,268],$VS=[1,269],$VT=[1,270],$VU=[1,282],$VV=[1,283],$VW=[29,51,56,57,58,59,60],$VX=[1,306],$VY=[1,307],$VZ=[1,314],$V_=[20,26,29,42,45,46,47,48,49,68,73,78,84,85,87,96];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"INICIALIZACION":8,"ptcoma":9,"METODOS":10,"FUNCIONES":11,"CALLS":12,"PRINT":13,"CUERPOMETODO":14,"IFS":15,"DECLAVECT":16,"MODDIFIC":17,"DECLALIST":18,"ADDLIST":19,"break":20,"SWITCHS":21,"WHILES":22,"FORS":23,"DOWHILE":24,"RETURN":25,"continue":26,"LLAMADAS":27,"TIPO":28,"identificador":29,"igual":30,"EXP":31,"CASTEO":32,"ACCESS":33,"TOLOWEER":34,"TOUPPER":35,"LENGTH":36,"TRUNCATE":37,"ROUND":38,"TYPEOF":39,"TOSTRING":40,"TOCHARARRAY":41,"return":42,"parA":43,"parC":44,"char":45,"boolean":46,"double":47,"int":48,"string":49,"mas":50,"menos":51,"div":52,"multi":53,"exponente":54,"modulo":55,"cadena":56,"caracter":57,"numeros":58,"true":59,"false":60,"corA":61,"corC":62,"new":63,"llaveA":64,"EXPRESIONES":65,"llaveC":66,"coma":67,"list":68,"menor":69,"mayor":70,"punto":71,"add":72,"if":73,"CONDICIONES":74,"CONTINAUCIONIF":75,"ELSEIF":76,"ELSES":77,"switch":78,"CUERPOSWITCH":79,"case":80,"dospts":81,"default":82,"else":83,"while":84,"for":85,"INCRE":86,"do":87,"LOGICO":88,"mayorigual":89,"igualigual":90,"menorigual":91,"or":92,"and":93,"not":94,"void":95,"print":96,"tolower":97,"toupper":98,"length":99,"truncate":100,"round":101,"typeof":102,"tostring":103,"tochararray":104,"EXEC":105,"exec":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"ptcoma",20:"break",26:"continue",29:"identificador",30:"igual",42:"return",43:"parA",44:"parC",45:"char",46:"boolean",47:"double",48:"int",49:"string",50:"mas",51:"menos",52:"div",53:"multi",54:"exponente",55:"modulo",56:"cadena",57:"caracter",58:"numeros",59:"true",60:"false",61:"corA",62:"corC",63:"new",64:"llaveA",66:"llaveC",67:"coma",68:"list",69:"menor",70:"mayor",71:"punto",72:"add",73:"if",78:"switch",80:"case",81:"dospts",82:"default",83:"else",84:"while",85:"for",87:"do",89:"mayorigual",90:"igualigual",91:"menorigual",92:"or",93:"and",94:"not",95:"void",96:"print",97:"tolower",98:"toupper",99:"length",100:"truncate",101:"round",102:"typeof",103:"tostring",104:"tochararray",106:"exec"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,3],[6,1],[6,1],[6,1],[6,1],[6,1],[14,2],[14,2],[14,3],[14,2],[14,2],[14,2],[14,2],[14,3],[14,2],[14,2],[14,1],[14,1],[14,2],[14,1],[14,1],[14,1],[14,1],[14,2],[14,2],[14,1],[14,2],[14,1],[14,2],[14,1],[14,2],[14,1],[14,2],[14,1],[14,2],[14,1],[7,3],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,5],[7,2],[25,3],[25,2],[8,4],[32,4],[28,1],[28,1],[28,1],[28,1],[28,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[16,10],[16,8],[65,3],[65,3],[65,3],[65,3],[65,3],[65,1],[65,1],[65,1],[65,1],[65,1],[33,4],[33,6],[17,7],[17,9],[18,12],[19,7],[15,8],[15,7],[75,2],[75,1],[21,7],[79,5],[79,4],[79,3],[76,8],[77,4],[22,7],[23,11],[23,10],[23,11],[24,9],[86,2],[86,2],[74,5],[74,5],[74,6],[74,5],[74,5],[74,3],[74,3],[74,3],[74,3],[74,4],[74,1],[88,1],[88,1],[88,1],[11,8],[11,7],[10,8],[10,7],[27,4],[27,3],[12,2],[13,5],[34,4],[35,4],[36,4],[37,4],[38,4],[39,4],[40,4],[41,4],[105,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 6: case 7: case 8: case 9: case 10:
this.$=$$[$0]
break;
case 5:
this.$=$$[$0-2]
break;
case 63:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.SUMA,this._$.first_line,this._$.first_column+1)
break;
case 64:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.RESTA,this._$.first_line,this._$.first_column+1)
break;
case 65:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.DIVISION,this._$.first_line,this._$.first_column+1)
break;
case 66:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line,this._$.first_column+1)
break;
case 67:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line,this._$.first_column+1)
break;
case 68:
this.$ = INSTRUCCION.nuevaOperacionBinaria(1, $$[$0], TIPO_OPERACION.NEGACION,this._$.first_line,this._$.first_column+1)
break;
case 69:
this.$ = INSTRUCCION.nuevaOperacionBinaria($$[$0-2], $$[$0], TIPO_OPERACION.MODULO,this._$.first_line,this._$.first_column+1)
break;
case 72:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.STRING, this._$.first_line,this._$.first_column+1)
break;
case 73:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.CHAR, this._$.first_line,this._$.first_column+1)
break;
case 74:
this.$ = INSTRUCCION.nuevoValor(Number($$[$0]), TIPO_VALOR.INT, this._$.first_line,this._$.first_column+1)
break;
case 75:
this.$ = INSTRUCCION.nuevoValor(($$[$0]), TIPO_VALOR.BOOLEAN, this._$.first_line,this._$.first_column+1)
break;
case 76:
this.$ = INSTRUCCION.nuevoValor($$[$0], TIPO_VALOR.BOOLEAN, this._$.first_line,this._$.first_column+1)
break;
case 133:
this.$ = new INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line, this._$.first_column+1)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,27:13,28:10,29:$V0,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,95:$V6,96:$V7},{1:[3]},{5:[1,20],6:21,7:4,8:5,10:6,11:7,12:8,13:9,27:13,28:10,29:$V0,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,95:$V6,96:$V7},o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,7],{9:[1,22]}),o($V8,[2,6]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),{29:[1,23]},{30:$V9,43:$Va},{29:[1,26]},{9:[1,27]},{43:[1,28]},o($Vb,[2,58]),o($Vb,[2,59]),o($Vb,[2,60]),o($Vb,[2,61]),o($Vb,[2,62]),{1:[2,1]},o($V8,[2,2]),{6:29,7:4,8:5,10:6,11:7,12:8,13:9,27:13,28:10,29:$V0,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,95:$V6,96:$V7},o($V8,$Vc,{9:$Vd,30:$Ve,43:[1,32]}),{27:36,29:$Vf,31:33,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{7:47,28:49,29:$Vm,44:[1,43],45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vn,57:$Vo,58:$Vp,65:42},{43:[1,50]},o($V8,[2,132]),{27:36,29:$Vf,31:51,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},o($V8,[2,5]),o($Vq,[2,41]),{27:36,29:[1,63],31:52,32:53,33:54,34:55,35:56,36:57,37:58,38:59,39:60,40:61,41:62,43:[1,64],51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,97:[1,65],98:[1,66],99:[1,67],100:[1,68],101:[1,69],102:[1,70],103:[1,71],104:[1,72]},{7:47,28:49,29:$Vm,44:[1,74],45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vn,57:$Vo,58:$Vp,65:73},{9:[1,75],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{27:36,29:$Vf,31:82,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},o($Vx,$Vy,{43:$Va}),o($Vx,[2,71]),o($Vx,[2,72]),o($Vx,[2,73]),o($Vx,[2,74]),o($Vx,[2,75]),o($Vx,[2,76]),{44:[1,83]},o($Vz,[2,131]),o($VA,[2,87],{67:[1,84]}),o($VA,[2,88],{67:[1,85]}),o($VA,[2,86],{67:[1,86]}),o($VA,[2,84],{67:[1,87]}),o($VA,[2,85],{67:[1,88]}),{29:$VB},{7:47,28:49,29:$Vm,44:[1,91],45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vn,57:$Vo,58:$Vp,65:90},{44:[1,92],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{9:[1,93],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{9:[1,94]},{9:[1,95]},{9:[1,96]},{9:[1,97]},{9:[1,98]},{9:[1,99]},{9:[1,100]},{9:[1,101]},{9:[1,102]},{9:[1,103]},o([9,50,51,52,53,54,55],$Vy,{43:$Va,61:[1,104]}),{28:105,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5},{43:[1,106]},{43:[1,107]},{43:[1,108]},{43:[1,109]},{43:[1,110]},{43:[1,111]},{43:[1,112]},{43:[1,113]},{44:[1,114]},{64:[1,115]},o([5,9,29,44,45,46,47,48,49,51,56,57,58,59,60,95,96],[2,56]),{27:36,29:$Vf,31:116,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:117,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:118,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:119,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:120,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:121,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},o($Vx,[2,68]),o($Vz,[2,130]),{7:47,28:49,29:$Vm,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vn,57:$Vo,58:$Vp,65:122},{7:47,28:49,29:$Vm,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vn,57:$Vo,58:$Vp,65:123},{7:47,28:49,29:$Vm,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vn,57:$Vo,58:$Vp,65:124},{7:47,28:49,29:$Vm,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vn,57:$Vo,58:$Vp,65:125},{7:47,28:49,29:$Vm,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vn,57:$Vo,58:$Vp,65:126},o([20,26,29,42,44,45,46,47,48,49,51,56,57,58,59,60,66,67,68,73,78,80,82,84,85,87,96],$Vc,{9:$Vd,30:$Ve}),{44:[1,127]},{64:[1,128]},{9:[1,129]},o($Vq,[2,42]),o($Vq,[2,43]),o($Vq,[2,44]),o($Vq,[2,45]),o($Vq,[2,46]),o($Vq,[2,47]),o($Vq,[2,48]),o($Vq,[2,49]),o($Vq,[2,50]),o($Vq,[2,51]),o($Vq,[2,52]),{58:[1,130],61:[1,131]},{44:[1,132]},{27:36,29:$Vf,31:133,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:134,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:135,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:136,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:137,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:138,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:139,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:140,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{64:[1,141]},{7:144,8:145,13:158,14:142,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},o($VM,[2,63],{52:$Vt,53:$Vu,54:$Vv,55:$Vw}),o($VM,[2,64],{52:$Vt,53:$Vu,54:$Vv,55:$Vw}),o($VN,[2,65],{54:$Vv}),o($VN,[2,66],{54:$Vv}),o($Vx,[2,67]),o($VN,[2,69],{54:$Vv}),o($VA,[2,79]),o($VA,[2,80]),o($VA,[2,81]),o($VA,[2,82]),o($VA,[2,83]),{64:[1,168]},{7:144,8:145,13:158,14:169,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},o([5,20,26,29,42,45,46,47,48,49,66,68,73,78,80,82,84,85,87,95,96],[2,133]),{62:[1,170]},{58:[1,171]},{27:36,29:$Vf,31:172,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{44:[1,173],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{44:[1,174],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{44:[1,175],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{44:[1,176],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{44:[1,177],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{44:[1,178],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{44:[1,179],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{44:[1,180],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{7:144,8:145,13:158,14:181,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},{66:[1,182]},o($VO,[2,21],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:183,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,22],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:184,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),{9:[1,185]},o($VO,[2,24],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:186,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,25],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:187,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,26],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:188,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,27],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:189,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),{9:[1,190]},{7:144,8:145,13:158,14:191,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},{7:144,8:145,13:158,14:192,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},o($VO,[2,30],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:193,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,32],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:194,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,34],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:195,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,36],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:196,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,38],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:197,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,40],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:198,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),{43:[1,199]},{29:$VB,61:[1,200]},{30:$V9,43:$Va,61:[1,201],71:[1,202]},{69:[1,203]},{43:[1,204]},{43:[1,205]},{43:[1,206]},{64:[1,207]},{9:[1,209],27:36,29:$Vf,31:208,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{7:144,8:145,13:158,14:210,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},{66:[1,211]},{9:[2,89]},{62:[1,212]},{9:[2,57],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{9:[2,134]},{9:[2,135]},{9:[2,136]},{9:[2,137]},{9:[2,138]},{9:[2,139]},{9:[2,140]},{9:[2,141]},{66:[1,213]},o($V8,[2,127]),o($VO,[2,11]),o($VO,[2,12]),o($VO,[2,23],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:214,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,14]),o($VO,[2,15]),o($VO,[2,16]),o($VO,[2,17]),o($VO,[2,28],{15:143,7:144,8:145,16:146,17:147,18:148,19:149,21:151,22:152,23:153,24:154,25:155,27:157,13:158,28:160,14:215,20:$VC,26:$VD,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7}),o($VO,[2,19]),o($VO,[2,20]),o($VO,[2,29]),o($VO,[2,31]),o($VO,[2,33]),o($VO,[2,35]),o($VO,[2,37]),o($VO,[2,39]),{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:216},{62:[1,218]},{58:[1,219],61:[1,220]},{72:[1,221]},{28:222,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5},{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:223},{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:224},{7:225,8:226,28:49,29:[1,227],45:$V1,46:$V2,47:$V3,48:$V4,49:$V5},{7:144,8:145,13:158,14:228,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},{9:[1,229],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},o($VP,[2,55]),{66:[1,230]},o($V8,[2,129]),{62:[1,231]},o($V8,[2,126]),o($VO,[2,13]),o($VO,[2,18]),{44:[1,232]},o($VQ,[2,122],{30:[1,235],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,69:[1,234],70:[1,233],89:[1,236],90:[1,237],91:[1,238]}),{29:[1,239]},{62:[1,240]},{58:[1,241]},{43:[1,242]},{70:[1,243]},{44:[1,244]},{44:[1,245]},{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:246},{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:247},{30:$V9},{66:[1,248]},o($VP,[2,54]),o($V8,[2,128]),{9:[2,90]},{64:[1,249]},{27:36,29:$Vf,31:250,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:251,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{30:[1,252]},{27:36,29:$Vf,31:253,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:254,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{27:36,29:$Vf,31:255,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{30:[1,256]},{30:[1,257]},{62:[1,258]},{27:36,29:$Vf,31:259,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{29:[1,260]},{64:[1,261]},{64:[1,262]},{9:[1,263]},{9:[1,264]},{84:[1,265]},{7:144,8:145,13:158,14:266,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},o($VQ,[2,117],{88:267,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,92:$VR,93:$VS,94:$VT}),o($VQ,[2,118],{88:271,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,92:$VR,93:$VS,94:$VT}),{27:36,29:$Vf,31:272,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},o($VQ,[2,120],{88:273,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,92:$VR,93:$VS,94:$VT}),{50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,88:274,92:$VR,93:$VS,94:$VT},o($VQ,[2,119],{50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw}),{63:[1,275],64:[1,276]},{27:36,29:$Vf,31:277,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},{62:[1,278]},{44:[1,279],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{30:[1,280]},{79:281,80:$VU,82:$VV},{7:144,8:145,13:158,14:284,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},{29:[1,285]},{8:286,29:[1,287]},{43:[1,288]},{66:[1,289]},{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:290},o($VW,[2,123]),o($VW,[2,124]),o($VW,[2,125]),{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:291},o($VQ,[2,121],{88:292,50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw,92:$VR,93:$VS,94:$VT}),{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:293},{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:294},{28:295,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5},{7:47,28:49,29:$Vm,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,56:$Vn,57:$Vo,58:$Vp,65:296},{9:[1,297],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{30:[1,298]},{9:[1,299]},{63:[1,300]},{66:[1,301]},{58:[1,302]},{81:[1,303]},{66:[1,304]},{50:$VX,51:$VY,86:305},{44:[1,308]},{30:$V9,50:$VX,51:$VY,86:309},{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:310},o($VP,[2,96],{75:311,76:312,77:313,83:$VZ}),o($VQ,[2,112]),o($VQ,[2,113]),{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:315},o($VQ,[2,115]),o($VQ,[2,116]),{61:[1,316]},{66:[1,317]},o($VP,[2,91]),{27:36,29:$Vf,31:318,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl},o($VP,[2,94]),{68:[1,319]},o($V_,[2,99]),{81:[1,320]},{7:144,8:145,13:158,14:321,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},o($V_,[2,105]),{44:[1,322]},{50:[1,323]},{51:[1,324]},{64:[1,325]},{44:[1,326]},{44:[1,327]},o($VP,[2,95]),{75:328,76:312,77:313,83:$VZ},o($VP,[2,98]),{64:[1,330],73:[1,329]},o($VQ,[2,114]),{58:[1,331]},o($VP,[2,78]),{9:[1,332],50:$Vr,51:$Vs,52:$Vt,53:$Vu,54:$Vv,55:$Vw},{69:[1,333]},{7:144,8:145,13:158,14:334,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},{66:[2,102]},{64:[1,335]},{44:[2,110]},{44:[2,111]},{7:144,8:145,13:158,14:336,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},{64:[1,337]},{9:[1,338]},o($VP,[2,97]),{43:[1,339]},{7:144,8:145,13:158,14:340,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},{62:[1,341]},o($VP,[2,92]),{28:342,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5},{66:[2,101],79:343,80:$VU,82:$VV},{7:144,8:145,13:158,14:344,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},{66:[1,345]},{7:144,8:145,13:158,14:346,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},o($VP,[2,109]),{27:36,29:$Vf,31:217,51:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,74:347},{66:[1,348]},o($VP,[2,77]),{70:[1,349]},{66:[2,100]},{66:[1,350]},o($VP,[2,107]),{66:[1,351]},{44:[1,352]},o($VP,[2,104]),{9:[1,353]},o($VP,[2,106]),o($VP,[2,108]),{64:[1,354]},o($VP,[2,93]),{7:144,8:145,13:158,14:355,15:143,16:146,17:147,18:148,19:149,20:$VC,21:151,22:152,23:153,24:154,25:155,26:$VD,27:157,28:160,29:$VE,42:$VF,45:$V1,46:$V2,47:$V3,48:$V4,49:$V5,68:$VG,73:$VH,78:$VI,84:$VJ,85:$VK,87:$VL,96:$V7},{66:[1,356]},{83:[2,103]}],
defaultActions: {20:[2,1],170:[2,89],173:[2,134],174:[2,135],175:[2,136],176:[2,137],177:[2,138],178:[2,139],179:[2,140],180:[2,141],231:[2,90],321:[2,102],323:[2,110],324:[2,111],343:[2,100],356:[2,103]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TIPO_OPERACION = require('./controller/Enums/TipoOperacion');
    const TIPO_VALOR = require('./controller/Enums/TipoValor');
    
    const TIPO_DATO = require('./controller/Enums/TipoDato');
   
    const INSTRUCCION = require('./controller/Instruccion/Instruccion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 58
break;
case 4:return 48;
break;
case 5:return 46;
break;
case 6:return 47;
break;
case 7:return 45;
break;
case 8:return 49;
break;
case 9:return 59;
break;
case 10:return 60;
break;
case 11:return 63;
break;
case 12:return 68;
break;
case 13:return 72;
break;
case 14:return 71;
break;
case 15:return 50;
break;
case 16:return 53;
break;
case 17:return 52;
break;
case 18:return 51;
break;
case 19:return 30;
break;
case 20:return 54;
break;
case 21:return 55;
break;
case 22:return 'diferencia';
break;
case 23:return 69;
break;
case 24:return 91;
break;
case 25:return 67;
break;
case 26:return 70;
break;
case 27:return 89;
break;
case 28:return 'interrogacion';
break;
case 29:return 81;
break;
case 30:return 94;
break;
case 31:return 92;
break;
case 32:return 93;
break;
case 33:return 43;
break;
case 34:return 44;
break;
case 35:return 61;
break;
case 36:return 62;
break;
case 37:return 9;
break;
case 38:return 64;
break;
case 39:return 66;
break;
case 40:return "saltoln";
break;
case 41:return "Barrainv";
break;
case 42:return "comilladoble";
break;
case 43:return 73;
break;
case 44:return 83;
break;
case 45:return 78;
break;
case 46:return 80;
break;
case 47:return 82;
break;
case 48:return 20;
break;
case 49:return 26;
break;
case 50:return 42;
break;
case 51:return 84;
break;
case 52:return 87;
break;
case 53:return 85;
break;
case 54:return 95;
break;
case 55:return 96;
break;
case 56:return 97;
break;
case 57:return 98;
break;
case 58:return 99;
break;
case 59:return 100;
break;
case 60:return 101;
break;
case 61:return 102;
break;
case 62:return 103;
break;
case 63:return 104;
break;
case 64:return 106;
break;
case 65:return 29;
break;
case 66:return 56;
break;
case 67:return 57;
break;
case 68:return 5;
break;
case 69: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:int\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:=)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:<=)/i,/^(?:,)/i,/^(?:>)/i,/^(?:>=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\\n)/i,/^(?:\\\\)/i,/^(?:\\")/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:Default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:TypeOf\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\""])["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}